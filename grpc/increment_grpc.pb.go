// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: grpc/increment.proto

package incrementValue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncrementValueClient is the client API for IncrementValue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncrementValueClient interface {
	Increment(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*Response, error)
	GetHeartBeat(ctx context.Context, in *BeatRequest, opts ...grpc.CallOption) (*BeatAck, error)
	AddToValue(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*Response, error)
}

type incrementValueClient struct {
	cc grpc.ClientConnInterface
}

func NewIncrementValueClient(cc grpc.ClientConnInterface) IncrementValueClient {
	return &incrementValueClient{cc}
}

func (c *incrementValueClient) Increment(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/incrementValue.IncrementValue/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementValueClient) GetHeartBeat(ctx context.Context, in *BeatRequest, opts ...grpc.CallOption) (*BeatAck, error) {
	out := new(BeatAck)
	err := c.cc.Invoke(ctx, "/incrementValue.IncrementValue/GetHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementValueClient) AddToValue(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/incrementValue.IncrementValue/AddToValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncrementValueServer is the server API for IncrementValue service.
// All implementations must embed UnimplementedIncrementValueServer
// for forward compatibility
type IncrementValueServer interface {
	Increment(context.Context, *AddRequest) (*Response, error)
	GetHeartBeat(context.Context, *BeatRequest) (*BeatAck, error)
	AddToValue(context.Context, *AddRequest) (*Response, error)
	mustEmbedUnimplementedIncrementValueServer()
}

// UnimplementedIncrementValueServer must be embedded to have forward compatible implementations.
type UnimplementedIncrementValueServer struct {
}

func (UnimplementedIncrementValueServer) Increment(context.Context, *AddRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedIncrementValueServer) GetHeartBeat(context.Context, *BeatRequest) (*BeatAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeartBeat not implemented")
}
func (UnimplementedIncrementValueServer) AddToValue(context.Context, *AddRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToValue not implemented")
}
func (UnimplementedIncrementValueServer) mustEmbedUnimplementedIncrementValueServer() {}

// UnsafeIncrementValueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncrementValueServer will
// result in compilation errors.
type UnsafeIncrementValueServer interface {
	mustEmbedUnimplementedIncrementValueServer()
}

func RegisterIncrementValueServer(s grpc.ServiceRegistrar, srv IncrementValueServer) {
	s.RegisterService(&IncrementValue_ServiceDesc, srv)
}

func _IncrementValue_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementValueServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/incrementValue.IncrementValue/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementValueServer).Increment(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncrementValue_GetHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementValueServer).GetHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/incrementValue.IncrementValue/GetHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementValueServer).GetHeartBeat(ctx, req.(*BeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncrementValue_AddToValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementValueServer).AddToValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/incrementValue.IncrementValue/AddToValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementValueServer).AddToValue(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IncrementValue_ServiceDesc is the grpc.ServiceDesc for IncrementValue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncrementValue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "incrementValue.IncrementValue",
	HandlerType: (*IncrementValueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _IncrementValue_Increment_Handler,
		},
		{
			MethodName: "GetHeartBeat",
			Handler:    _IncrementValue_GetHeartBeat_Handler,
		},
		{
			MethodName: "AddToValue",
			Handler:    _IncrementValue_AddToValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/increment.proto",
}
